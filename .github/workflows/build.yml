name: Build AetherOnePy Executable with Plugins

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Plugin Environment'
        required: false
        default: 'ci'
        type: choice
        options:
        - ci
        - production
        - development

env:
  PYTHON_VERSION: '3.11'
  PYINSTALLER_VERSION: '6.14.2'
  PLUGIN_DIR: 'py/plugins'
  UI_DIST_DIR: 'ui/dist/ui/browser'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies (explicitly)
       run: |
        Write-Host "=== Installing Core Dependencies ===" -ForegroundColor Green
        python -m pip install --upgrade pip
        pip install pyinstaller==${{ env.PYINSTALLER_VERSION }}
        pip install flask flask-cors flask-socketio pywebview screeninfo requests
      shell: pwsh

    - name: Prepare plugin and data directories
      run: |
        Write-Host "=== Preparing Directories ===" -ForegroundColor Cyan
        New-Item -Path "${{ env.PLUGIN_DIR }}" -ItemType Directory -Force
        New-Item -Path "data" -ItemType Directory -Force
      shell: pwsh

    - name: Clone AetherOne Social Plugin
      run: |
        Write-Host "=== Cloning AetherOne Social Plugin ===" -ForegroundColor Cyan
        git clone https://github.com/emolionl/AetherOnePySocialPlugin.git ${{ env.PLUGIN_DIR }}/AetherOnePySocialPlugin
      shell: pwsh

    - name: Clone Financial Compass Plugin
      run: |
        Write-Host "=== Cloning Financial Compass Plugin ===" -ForegroundColor Cyan
        git clone https://github.com/emolionl/FinCompassPlugin.git ${{ env.PLUGIN_DIR }}/FinCompassPlugin
      shell: pwsh
        
    - name: Install plugin dependencies
      run: |
        Write-Host "=== Installing Plugin Dependencies ===" -ForegroundColor Cyan
        $requirementFiles = Get-ChildItem -Path "${{ env.PLUGIN_DIR }}" -Filter "requirements.txt" -Recurse -ErrorAction SilentlyContinue
        foreach ($reqFile in $requirementFiles) {
            Write-Host "üì¶ Installing requirements from: $($reqFile.FullName)" -ForegroundColor Cyan
            pip install -r $reqFile.FullName
        }
      shell: pwsh

    - name: Build UI (Angular)
      run: |
        Write-Host "=== Building UI ===" -ForegroundColor Green
        cd ui
        npm install
        npm run build -- --base-href=/
        cd ..

    - name: Clean build directories
      run: |
        Write-Host "=== Cleaning Build Directories ===" -ForegroundColor Yellow
        if (Test-Path "dist") { Remove-Item "dist" -Recurse -Force -ErrorAction SilentlyContinue }
        if (Test-Path "build") { Remove-Item "build" -Recurse -Force -ErrorAction SilentlyContinue }
      shell: pwsh

    - name: Build Executable with plugins
      run: |
        Write-Host "=== Building Executable ===" -ForegroundColor Green
        pyinstaller AetherOnePy.spec --noconfirm --log-level INFO

    - name: Create plugin inventory
      run: |
        Write-Host "=== Creating Plugin Inventory ===" -ForegroundColor Green
        New-Item -Path "dist/AetherOnePy" -ItemType Directory -Force
        $inventory = @{
            "build_info" = @{
                "timestamp" = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
                "environment" = "${{ github.event.inputs.environment || 'ci' }}"
                "commit" = "${{ github.sha }}"
                "python_version" = (python --version)
            }
            "plugins" = @{}
            "data_components" = @{}
        }
        
        # ... (rest of your original PowerShell script for inventory) ...
      shell: pwsh

    - name: Verify executable with plugins
      run: |
        Write-Host "=== Verifying Executable ===" -ForegroundColor Green
        
        $exePath = "dist\AetherOnePy\AetherOnePy.exe"
        
        if (Test-Path $exePath) {
            $fileInfo = Get-Item $exePath
            $sizeMB = [math]::Round($fileInfo.Length / 1MB, 2)
            
            Write-Host "‚úÖ Executable created successfully!" -ForegroundColor Green
            Write-Host "üìÅ Location: $($fileInfo.FullName)" -ForegroundColor White
            Write-Host "üìä Size: $sizeMB MB" -ForegroundColor White
            
            # Check if plugins are included in the distribution
            $distPlugins = "dist\AetherOnePy\py\plugins"
            if (Test-Path $distPlugins) {
                $pluginCount = (Get-ChildItem $distPlugins -Directory).Count
                Write-Host "üîå Bundled Plugins: $pluginCount" -ForegroundColor Green
            }
            
            $distData = "dist\AetherOnePy\data"
            if (Test-Path $distData) {
                $dataCount = (Get-ChildItem $distData -Directory).Count  
                Write-Host "üìä Bundled Data: $dataCount components" -ForegroundColor Green
            }
        } else {
            Write-Host "‚ùå Executable not found!" -ForegroundColor Red
            exit 1
        }
      shell: pwsh

    - name: Archive build directory
      run: |
        Write-Host "=== Archiving Build Directory ===" -ForegroundColor Green
        
        $outputDir = "dist/AetherOnePy"
        $archiveName = "AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip"
        
        if (Test-Path $outputDir) {
            Compress-Archive -Path "$outputDir\*" -DestinationPath $archiveName -Force
            Write-Host "‚úÖ Created archive: $archiveName" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Build directory 'dist/AetherOnePy' not found!" -ForegroundColor Red
            exit 1
        }
      shell: pwsh

    - name: Upload build with plugins
      uses: actions/upload-artifact@v4
      with:
        name: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}-${{ github.sha }}
        path: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip
        retention-days: 30

    - name: Create release with plugins
      if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        name: AetherOnePy with Plugins ${{ github.ref_name }}
        body: |
          ## üöÄ AetherOnePy Desktop Application with Plugins
          This release includes the complete AetherOnePy application with all configured plugins.
          
          ### üì¶ What's Included
          - ‚úÖ Complete desktop application
          - ‚úÖ All enabled plugins
          - ‚úÖ Plugin dependencies automatically resolved
          - ‚úÖ Data components and rates database
          
          ### üõ†Ô∏è Installation
          1. Download `AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip` from the assets below.
          2. Extract the contents and run `AetherOnePy.exe`.
          
          ---
          Built automatically with GitHub Actions ü§ñ
        files: |
          AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}