name: Build AetherOnePy Executable with Plugins

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Plugin Environment'
        required: false
        default: 'ci'
        type: choice
        options:
        - ci
        - production
        - development

env:
  PYTHON_VERSION: '3.11'
  PYINSTALLER_VERSION: '6.14.2'
  PLUGIN_DIR: 'py/plugins'
  UI_DIST_DIR: 'ui/dist/ui/browser'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies (explicitly)
      run: |
        Write-Host "=== Installing Core Dependencies ===" -ForegroundColor Green
        python -m pip install --upgrade pip
        pip install pyinstaller==${{ env.PYINSTALLER_VERSION }}
        pip install flask flask-cors flask-socketio pywebview screeninfo requests pythonnet
      shell: pwsh

    - name: Prepare plugin and data directories
      run: |
        Write-Host "=== Preparing Directories ===" -ForegroundColor Cyan
        New-Item -Path "${{ env.PLUGIN_DIR }}" -ItemType Directory -Force
        New-Item -Path "data" -ItemType Directory -Force
      shell: pwsh

    - name: Clone plugins from config
      run: |
        Write-Host "=== Cloning Plugins from plugins-config.json ===" -ForegroundColor Cyan
        $config = Get-Content -Path "plugins-config.json" | ConvertFrom-Json
        $environment = "${{ github.event.inputs.environment || 'ci' }}"
        
        Write-Host "Environment: $environment" -ForegroundColor Cyan
        Write-Host "Plugin directory: ${{ env.PLUGIN_DIR }}" -ForegroundColor Cyan
        
        foreach ($pluginKey in $config.plugins.PSObject.Properties.Name) {
            $plugin = $config.plugins.$pluginKey
            
            Write-Host "`n--- Processing plugin: $pluginKey ---" -ForegroundColor White
            Write-Host "Plugin name: $($plugin.name)" -ForegroundColor Gray
            Write-Host "Enabled: $($plugin.enabled)" -ForegroundColor Gray
            Write-Host "Required: $($plugin.required)" -ForegroundColor Gray
            
            if (-not $plugin.enabled) {
                Write-Host "‚è≠Ô∏è Skipping disabled plugin: $($plugin.name)" -ForegroundColor Yellow
                continue
            }
            
            if ($environment -eq "ci" -and $config.environments.ci.skip_optional -and -not $plugin.required) {
                Write-Host "‚è≠Ô∏è Skipping optional plugin in CI: $($plugin.name)" -ForegroundColor Yellow
                continue
            }
            
            $repoUrl = $plugin.repository.url
            $branch = $plugin.repository.branch
            $installPath = "${{ env.PLUGIN_DIR }}/$pluginKey"
            
            Write-Host "Repository: $repoUrl" -ForegroundColor Gray
            Write-Host "Branch: $branch" -ForegroundColor Gray
            Write-Host "Install path: $installPath" -ForegroundColor Gray
            
            # Ensure parent directory exists
            $parentDir = Split-Path -Parent $installPath
            if (-not (Test-Path $parentDir)) {
                New-Item -Path $parentDir -ItemType Directory -Force
                Write-Host "Created parent directory: $parentDir" -ForegroundColor Gray
            }
            
            Write-Host "üì¶ Cloning $($plugin.name) from $repoUrl" -ForegroundColor Cyan
            git clone --branch $branch --depth 1 $repoUrl $installPath
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Successfully cloned $($plugin.name)" -ForegroundColor Green
                
                # Verify plugin structure
                $routesFile = Join-Path $installPath "routes.py"
                $initFile = Join-Path $installPath "__init__.py"
                
                if (Test-Path $routesFile) {
                    Write-Host "  ‚úì Found routes.py" -ForegroundColor Green
                } else {
                    Write-Host "  ‚ö†Ô∏è Missing routes.py" -ForegroundColor Yellow
                }
                
                if (Test-Path $initFile) {
                    Write-Host "  ‚úì Found __init__.py" -ForegroundColor Green
                } else {
                    Write-Host "  ‚ö†Ô∏è Missing __init__.py" -ForegroundColor Yellow
                }
                
                # List plugin contents for debugging
                Write-Host "  Plugin contents:" -ForegroundColor Gray
                Get-ChildItem -Path $installPath -Name | ForEach-Object {
                    Write-Host "    - $_" -ForegroundColor DarkGray
                }
                
            } else {
                Write-Host "‚ùå Failed to clone $($plugin.name)" -ForegroundColor Red
                Write-Host "Git error code: $LASTEXITCODE" -ForegroundColor Red
                exit 1
            }
        }
        
        # Final verification - list all plugin directories
        Write-Host "`n=== Final Plugin Directory Structure ===" -ForegroundColor Cyan
        if (Test-Path "${{ env.PLUGIN_DIR }}") {
            Get-ChildItem -Path "${{ env.PLUGIN_DIR }}" -Directory | ForEach-Object {
                Write-Host "Plugin directory: $($_.Name)" -ForegroundColor Green
                $routesPath = Join-Path $_.FullName "routes.py"
                if (Test-Path $routesPath) {
                    Write-Host "  ‚úì Has routes.py" -ForegroundColor Green
                } else {
                    Write-Host "  ‚úó Missing routes.py" -ForegroundColor Red
                }
            }
        } else {
            Write-Host "‚ùå Plugin directory not found: ${{ env.PLUGIN_DIR }}" -ForegroundColor Red
        }
      shell: pwsh
        
    - name: Install plugin dependencies
      run: |
        Write-Host "=== Installing Plugin Dependencies ===" -ForegroundColor Cyan
        $requirementFiles = Get-ChildItem -Path "${{ env.PLUGIN_DIR }}" -Filter "requirements.txt" -Recurse -ErrorAction SilentlyContinue
        foreach ($reqFile in $requirementFiles) {
            Write-Host "üì¶ Installing requirements from: $($reqFile.FullName)" -ForegroundColor Cyan
            pip install -r $reqFile.FullName
        }
      shell: pwsh

    - name: Build UI (Angular)
      run: |
        Write-Host "=== Building UI ===" -ForegroundColor Green
        cd ui
        npm install
        npm run build -- --base-href=/
        cd ..
      shell: pwsh
    
    - name: Clean build directories
      run: |
        if (Test-Path "dist") { Remove-Item -Path "dist" -Recurse -Force }
        if (Test-Path "build") { Remove-Item -Path "build" -Recurse -Force }
      shell: pwsh

    - name: Build Executable with plugins
      run: pyinstaller AetherOnePy.spec --noconfirm --log-level INFO
      shell: pwsh

    - name: Create plugin inventory and copy plugins
      run: |
        Write-Host "=== Creating Plugin Inventory ===" -ForegroundColor Green
        $inventory = @{
            build_info = @{
                timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss UTC")
                environment = "${{ github.event.inputs.environment || 'ci' }}"
                commit = "${{ github.sha }}"
                python_version = python --version
            }
            plugins = @{}
            data_components = @{}
        }
        
        $json = $inventory | ConvertTo-Json -Depth 5
        $json | Out-File -FilePath "dist/AetherOnePy/build_inventory.json"
        
        Write-Host "Created build_inventory.json"
        
        Write-Host "=== Copying plugins to dist ===" -ForegroundColor Green
        if (Test-Path "${{ env.PLUGIN_DIR }}") {
            Copy-Item -Path "${{ env.PLUGIN_DIR }}" -Destination "dist/AetherOnePy/py" -Recurse -Force
        }
      shell: pwsh

    - name: Verify executable with plugins
      run: |
        Write-Host "=== Verifying Executable ===" -ForegroundColor Green
        $exePath = "dist\AetherOnePy\AetherOnePy.exe"
        if (Test-Path $exePath) {
            Write-Host "‚úÖ Executable created successfully!" -ForegroundColor Green
            exit 0
        } else {
            Write-Host "‚ùå Executable not found!" -ForegroundColor Red
            exit 1
        }
      shell: pwsh

    - name: Clean and optimize build directory
      run: |
        Write-Host "=== Cleaning Build Directory ===" -ForegroundColor Green
        
        # Remove unnecessary files to reduce size
        $cleanupPaths = @(
            "dist/AetherOnePy/_internal/py/plugins/*/frontend/node_modules",
            "dist/AetherOnePy/_internal/py/plugins/*/.git",
            "dist/AetherOnePy/_internal/py/plugins/*/*.md",
            "dist/AetherOnePy/_internal/py/plugins/*/docs",
            "dist/AetherOnePy/_internal/py/plugins/*/tests",
            "dist/AetherOnePy/_internal/py/plugins/*/__pycache__"
        )
        
        foreach ($path in $cleanupPaths) {
            if (Test-Path $path) {
                Write-Host "üßπ Removing: $path" -ForegroundColor Yellow
                Remove-Item -Path $path -Recurse -Force -ErrorAction SilentlyContinue
            }
        }
        
        # Get size before compression
        $size = (Get-ChildItem -Path "dist/AetherOnePy" -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB
        Write-Host "üìä Build directory size: $([math]::Round($size, 2)) MB" -ForegroundColor Cyan
      shell: pwsh

    - name: Archive build directory with compression
      run: |
        Write-Host "=== Archiving Build Directory ===" -ForegroundColor Green
        $archiveName = "AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip"
        
        # Use maximum compression
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::CreateFromDirectory("dist/AetherOnePy", $archiveName, [System.IO.Compression.CompressionLevel]::Optimal, $false)
        
        $archiveSize = (Get-Item $archiveName).Length / 1MB
        Write-Host "‚úÖ Created archive: $archiveName ($([math]::Round($archiveSize, 2)) MB)" -ForegroundColor Green
        
        # Split large files if needed (>500MB)
        if ($archiveSize -gt 500) {
            Write-Host "‚ö†Ô∏è Archive is large, consider splitting or further optimization" -ForegroundColor Yellow
        }
      shell: pwsh

    - name: Upload build with plugins
      uses: actions/upload-artifact@v4
      with:
        name: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}-${{ github.sha }}
        path: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip
        retention-days: 30
        compression-level: 0  # Already compressed
      continue-on-error: true
      id: upload_attempt

    - name: Retry upload on failure
      if: steps.upload_attempt.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}-${{ github.sha }}-retry
        path: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip
        retention-days: 30
        compression-level: 0

    - name: Create release with plugins
      if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        name: AetherOnePy with Plugins ${{ github.ref_name }}
        body: |
          ## üöÄ AetherOnePy Desktop Application with Plugins
          This release includes the complete AetherOnePy application with all configured plugins.
          
          ### üì¶ What's Included
          - ‚úÖ Complete desktop application
          - ‚úÖ All enabled plugins
          - ‚úÖ Plugin dependencies automatically resolved
          - ‚úÖ Data components and rates database
          
          ### üõ†Ô∏è Installation
          1. Download `AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip` from the assets below.
          2. Extract the contents and run `AetherOnePy.exe`.
          
          ---
          Built automatically with GitHub Actions ü§ñ
        files: AetherOnePy-WithPlugins-${{ github.event.inputs.environment || 'ci' }}.zip
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}